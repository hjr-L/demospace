备忘
--registry https://registry.npm.taobao.org
--registry http://mirrors.cloud.tencent.com/npm/


–soft会将撤销的放在cache里, 不想保留修改，就用–hard。
git reset --soft 196545da2edbac5abfd7ccb45a54786a90113b81

脱敏
replace(/(\d{3})\d*(\d{4})/,'$1****$2')

css 显示...

overflow: hidden;
text-overflow: ellipsis;
white-space: nowrap;

iOS11之后的安全区域：（顺序不能反）
height: constant(safe-area-inset-bottom);  /*兼容 IOS<11.2*/
height: env(safe-area-inset-bottom);  /*兼容 IOS>11.2*/

小程序保存base64图片
const download = () => {
    const manager = wx.getFileSystemManager();
    manager.writeFile({
        filePath: wx.env.USER_DATA_PATH + "/qrCode.jpg",
        data: "/9j/4AAQS…,
        encoding: "base64",
        success: (res) => {
            wx.saveImageToPhotosAlbum({
                filePath: wx.env.USER_DATA_PATH + "/qrCode.jpg",
                success: function (res) {
                    wx.showToast({
                        title: "保存成功"
                    });
                },
                fail: function (err) {
                    console.log(err);
                }
            });
            console.log(res);
        },
        fail: (err) => {
            console.log(err);
        }
    });
};


/**
 * 10000 => "10,000"
 * 千位符
 * @param {number} num
 */
export function toThousandFilter(num) {
  return (+num || 0).toString().replace(/^-?\d+/g, m => m.replace(/(?=(?!\b)(\d{3})+$)/g, ','))
}

/**
 * Upper case first char
 * 首字母大写
 * @param {String} string
 */
export function uppercaseFirst(string) {
  return string.charAt(0).toUpperCase() + string.slice(1)
}

// 滚到到指定距离, 并且发生触摸后停止
scrollToNumber(number = 0, el) {
    return new Promise((resolve, reject) => {
    let stop = false

    function listenCallBack() {
        stop = true
    }
    const stopEvents = [
        'click',
        'mousewheel',
        'touch',
        'touchstart',
        'touchmove',
        'touchend'
    ]
    setTimeout(() => {
        stopEvents.forEach((stopEvent) => {
        window.addEventListener(stopEvent, listenCallBack)
        })
    }, 50)

    function scrollTo(el, number, duration = 500) {
        const start = el.scrollTop;
        const change = number - start;
        const startTime = performance.now();
        const easeInOutQuad = (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);

        function animateScroll() {
        const currentTime = performance.now();
        const elapsed = currentTime - startTime;
        el.scrollTop = easeInOutQuad(elapsed / duration) * change + start;

        if (elapsed < duration) {
            requestAnimationFrame(animateScroll);
        } else {
            el.scrollTop = number;
            stopEvents.forEach((stopEvent) => {
            window.removeEventListener(stopEvent, listenCallBack);
            });
            resolve('scrollEnd');
        }
        }

        animateScroll();
    }
    scrollTo(el, number)

    })

}

